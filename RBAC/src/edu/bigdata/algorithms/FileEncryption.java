package edu.bigdata.algorithms;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

import javax.crypto.Cipher;
import javax.crypto.CipherOutputStream;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;

public class FileEncryption {

	/**
	 * @param encryptionKey
	 *            - is the encryptionKey generated by client.
	 * @param locationPath
	 *            - is the path which is to be encrypted.
	 * 
	 * @return This Method is called by Owner to encrypt images of that
	 *         particular location using encryption key generated by Owner using
	 *         AES technique.
	 */
	public void encryptFile(String encryptionKey, String locationPath) {

		FileInputStream fileInputStream = null;
		CipherOutputStream cipherOutputStream = null;
		FileOutputStream fileOutputStream = null;
		File inputLocation = new File(locationPath);
		String outputPath = locationPath + "Encrypted/";
		File outputDir = new File(outputPath);
		if (!outputDir.exists()) {
			outputDir.mkdir();
		}
		File[] listOfFiles = inputLocation.listFiles();
		for (File fileEntry : listOfFiles) {
			if (fileEntry.isFile()) {

				String fileName[] = fileEntry.getName().split("\\.");
				String fileAbsolutePath = fileEntry.getAbsolutePath();
				try {
					fileInputStream = new FileInputStream(fileAbsolutePath);
					fileOutputStream = new FileOutputStream(outputPath + fileName[0] + "." + fileName[1]);
					byte encryptionKeyBytes[] = encryptionKey.getBytes();
					SecretKeySpec key = new SecretKeySpec(encryptionKeyBytes, "AES");
					Cipher encryptionCipher = Cipher.getInstance("AES");
					encryptionCipher.init(Cipher.ENCRYPT_MODE, key);
					cipherOutputStream = new CipherOutputStream(fileOutputStream, encryptionCipher);
					byte[] buffer = new byte[1024];
					int read;
					while ((read = fileInputStream.read(buffer)) != -1) {
						cipherOutputStream.write(buffer, 0, read);
					}

				} catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IOException e) {
					e.printStackTrace();
				} finally {
					try {
						cipherOutputStream.close();
						fileInputStream.close();
						fileOutputStream.flush();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			}
		}
		System.out.println("All Files of location = " + locationPath + " has been encrypted.");
	}
}
